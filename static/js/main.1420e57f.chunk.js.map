{"version":3,"sources":["components/UsersList.js","components/UserHomePage.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["UsersList","props","console","log","className","users","map","user","to","id","key","src","profilepicture","alt","name","UserHomePage","Main","state","Axios","get","then","res","setState","data","path","component","exact","match","filter","parseInt","params","userId","Component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sUA6CiBA,MAxCf,SAAmBC,GAKf,OAJGC,QAAQC,IAAI,QACZD,QAAQC,IAAIF,GAIN,kBAAC,IAAD,CAAWG,UAAU,wBACpB,yBAAKA,UAAU,SACf,kBAAC,IAAD,CAAMA,UAAU,mBACZ,kBAAC,IAAD,KACI,2CAER,kBAAC,IAAD,CAAUA,UAAU,aACpB,wBAAIA,UAAU,cAENH,EAAMI,MAAMC,KAAK,SAAAC,GACb,OACA,kBAAC,IAAD,CAAMC,GAAE,wBAAmBD,EAAKE,KAChC,wBAAIC,IAAKH,EAAKE,IACX,yBAAKL,UAAU,uBACX,yBAAKO,IAAKJ,EAAKK,eAAgBC,IAAI,MAAMT,UAAU,gBAGtD,yBAAKA,UAAU,YACTG,EAAKO,iBClB1BC,MATf,SAAuBd,GACnB,OACI,6BACA,+CACA,yBAAKU,IAAKV,EAAMM,KAAKK,mB,wBC8ChBI,E,kDA5CX,WAAYf,GAAO,IAAD,8BACX,cAAMA,IACDgB,MAAQ,CACTZ,MAAO,IAHA,E,gEASM,IAAD,OACnBa,IAAMC,IAAI,sCACJC,MAAM,SAAAC,GACHnB,QAAQC,IAAIkB,GACZ,EAAKC,SACD,CAEIjB,MAAOgB,EAAIE,KAAKlB,a,+BAM5B,IAAD,OASJ,OACI,6BACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOmB,KAAK,YAAYC,UAAY,kBAAK,kBAAC,EAAD,CAAWpB,MAAO,EAAKY,MAAMZ,WACtE,kBAAC,IAAD,CAAOqB,OAAK,EAACF,KAAK,gBAAgBC,UAAWV,IAC7C,kBAAC,IAAD,CAAOS,KAAK,wBAAyBC,UAZxB,SAAC,GAAa,IAAZE,EAAW,EAAXA,MACjB,OACI,kBAAC,EAAD,CAAcpB,KAAM,EAAKU,MAAMZ,MAAMuB,QAAO,SAACrB,GAAD,OAAUA,EAAKE,KAAOoB,SAASF,EAAMG,OAAOC,OAAO,OAAK,QAWtG,kBAAC,IAAD,CAAUvB,GAAG,oB,GAtCPwB,aCSLC,MAVf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,SCEY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2DCXNW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.1420e57f.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardHeader,\n    CardTitle, Container} from 'reactstrap';\n    import {Link} from 'react-router-dom';\n \n  function UsersList(props){\n         console.log(\"Ajit\");\n         console.log(props)\n          \n\n      return(\n               <Container className=\"users-list-container\">\n                <div className=\"col-5\">\n                <Card className=\"users-list-card\">\n                    <CardHeader>\n                        <h4>Users List</h4>\n                    </CardHeader>\n                <CardBody className=\"card-body\" >\n                <ul className=\"users-list\">\n                    {\n                        props.users.map( user => {\n                            return(\n                            <Link to={`/userHomePage/${user.id}`}>\n                            <li key={user.id}>\n                               <div className=\"user-image user-row\">\n                                   <img src={user.profilepicture} alt=\"img\" className=\"user-image\"/>\n                                </div>\n\n                                <div className=\"user-row\">\n                                     {user.name}\n                                </div>\n                                \n                                </li>\n                                </Link>\n                            )\n                        })\n                    }\n                </ul>\n                </CardBody>\n                </Card>\n                </div>\n                </Container>\n      )\n  }\n\n  export default UsersList;","import React from 'react';\n \n  function UserHomePage( props ){\n      return(\n          <div>\n          <h1>Users Home page</h1>\n          <img src={props.user.profilepicture} />\n          </div>\n      )\n  }\n\n  export default UserHomePage;","import React ,{Component} from 'react';\nimport UsersList from './UsersList';\nimport UserHomePage from './UserHomePage';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Axios from 'axios';\n\n\nclass Main extends  Component{\n    constructor(props){\n           super(props);\n           this.state = {\n               users: [],\n               \n           }\n    }\n\n\n        componentDidMount(){\n        Axios.get('https://panorbit.in/api/users.json')            \n             .then( res => {\n                 console.log(res)\n                 this.setState(\n                     {\n                         \n                         users: res.data.users,\n                     }\n                 )\n             })\n    }\n      \n    render(){\n\n        const UserWithId = ({match}) => {\n            return(\n                <UserHomePage user={this.state.users.filter((user) => user.id === parseInt(match.params.userId,10))[0]} />\n            );\n          };\n     \n          \n        return (\n            <div>\n             <Switch>\n              <Route path='/userList' component={ () =><UsersList users={this.state.users}/>} />\n              <Route exact path='/userHomePage' component={UserHomePage} />\n              <Route path='/userHomePage/:userId'  component={UserWithId}/>\n              <Redirect to=\"/userList\"/>\n          </Switch>\n            </div>\n        )\n    }\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport { HashRouter } from 'react-router-dom';\n \n \nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <Main />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}